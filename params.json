{
  "name": "Remote-child process",
  "tagline": "Spawn a child_process on a remote via a server almost like a normal child_process",
  "body": "# remote-child_process\r\n\r\nSpawn a child_process on a remote via a server almost like a normal child_process.\r\n\r\n# Install\r\n\r\n```sh\r\nnpm i @mh-cbon/remote-child_process --save\r\n```\r\n\r\n# Usage\r\n\r\n__spawn__\r\n\r\n```js\r\nvar Rcp         = require('@mh-cbon/remote-child_process')\r\nvar RcpServer   = Rcp.RcpServer;\r\n\r\nvar spawn       = Rcp.spawn;\r\n\r\n\r\nvar address = {host: '127.0.0.1', port: 8080};\r\nvar server = new RcpServer()\r\n\r\nserver.open(address, function () {\r\n  var child = spawn('ls', ['-al'], {bridgeAddress: address, stdio: 'pipe'});\r\n\r\n  child.stdout.pipe(process.stdout);\r\n  child.stderr.pipe(process.stderr);\r\n  // child.stdin.end('some data');\r\n\r\n  child.on('error', function (err) {\r\n    console.log(err); // it may also throw ECONNREFUSED\r\n  })\r\n\r\n  child.on('started', function (err) {\r\n    console.log(\"pid=%s\", child.pid);\r\n  })\r\n\r\n  child.on('exit', function (err) {\r\n    console.log(\"exited\");\r\n  })\r\n  child.on('close', function () {\r\n    console.log(\"closed\")\r\n    server.close(force=!true);\r\n  })\r\n})\r\n\r\nvar tout = setTimeout(function () {\r\n  throw 'no client connected yet'\r\n}, 1500)\r\n\r\nserver.on('client_connected', function () {\r\n  clearTimeout(tout)\r\n})\r\n\r\n```\r\n\r\n__exec__\r\n\r\n```js\r\nvar Rcp         = require('@mh-cbon/remote-child_process')\r\nvar RcpServer   = Rcp.RcpServer;\r\n\r\nvar exec        = Rcp.exec;\r\n\r\n\r\nvar address = {host: '127.0.0.1', port: 8080};\r\nvar server = new RcpServer()\r\n\r\nserver.open(address, function () {\r\n  var opts = {bridgeAddress: address};\r\n  var child = exec('ls -al', opts, function (err, stdout, stderr) {\r\n    console.log(\"exec end\")\r\n    console.log(\"error=%s\", error);\r\n    console.log(\"stdout=%s\", stdout);\r\n    console.log(\"stderr=%s\", stderr);\r\n  });\r\n\r\n  child.on('error', function (err) {\r\n    console.log(err); // it may also throw ECONNREFUSED\r\n  })\r\n\r\n  child.on('started', function (err) {\r\n    console.log(\"pid=%s\", child.pid);\r\n  })\r\n\r\n  child.on('exit', function (err) {\r\n    console.log(\"exited\");\r\n  })\r\n  child.on('close', function () {\r\n    console.log(\"closed\")\r\n    server.close(force=!true);\r\n  })\r\n})\r\n\r\nvar tout = setTimeout(function () {\r\n  throw 'no client connected yet'\r\n}, 1500)\r\n\r\nserver.on('client_connected', function () {\r\n  clearTimeout(tout)\r\n})\r\n\r\n```\r\n\r\n- `pid` and `methods call` are available after `started` event has emit\r\n- on network failure, it throw error on the child\r\n- the remote process is __not__ running a TTY, so it may be a bit different\r\n- `cwd` is always forwarded and set appropriately\r\n\r\n# Why\r\n\r\nIt is used to spawn process on windows with elevated privileges, see [here](https://github.com/mh-cbon/aghfabsowecwn)\r\n\r\n# Todos\r\n\r\n- write tests\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}